name: Dummy Dispatch build bottle (for chosen OS versions)

run-name: Build bottle of ${{ inputs.formula }} on ${{ inputs.runner }}

on:
  # push:
  #   branches:    
  #     - joesweeney/gh-attestation
  workflow_dispatch:
    inputs:
      runner:
        description: Build runner(s) (macOS version or Linux)
        required: true
      formula:
        description: Formula name
        required: true
      timeout:
        description: "Build timeout (in minutes, default: 60 minutes)"
        default: "60"
        required: false
      issue:
        description: Issue number, where comment on failure would be posted
        required: false
      upload:
        description: "Upload built bottles? (default: false)"
        type: boolean
        default: false
        required: false

env:
  HOMEBREW_DEVELOPER: 1
  HOMEBREW_GITHUB_ACTIONS: 1
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_FROM_API: 1
  RUN_URL: ${{github.event.repository.html_url}}/actions/runs/${{github.run_id}}

# Intentionally the same as dispatch-rebottle
concurrency: bottle-${{ github.event.inputs.formula }}

permissions:
  contents: read

jobs:
  prepare:
    runs-on: ubuntu-22.04
    outputs:
      runners: ${{steps.runner-matrix.outputs.result}}
    steps:
      - name: Prepare runner matrix
        id: runner-matrix
        uses: actions/github-script@v6
        with:
          script: |
            const macOSRegex = /^\d+(?:\.\d+)?(?:-arm64)?$/;
            const linuxRegex = /^(ubuntu-|linux-self-hosted-)/;
            return context.payload.inputs.runner.split(",")
                                                .map(s => s.trim())
                                                .filter(Boolean)
                                                .map(s => {
              if (macOSRegex.test(s) && s != "11-arm64") // Ephemeral runners
                return {runner: `${s}-${context.runId}`, cleanup: false};
              else if (linuxRegex.test(s))
                return {
                  runner:    s,
                  container: {
                    image:   "ghcr.io/homebrew/ubuntu22.04:master",
                    options: "--user=linuxbrew -e GITHUB_ACTIONS_HOMEBREW_SELF_HOSTED"
                  },
                  workdir:   "/github/home",
                  cleanup:   false
                };
              else
                return {runner: s, cleanup: true};
            });

  bottle:
    needs: prepare
    strategy:
      matrix:
        include: ${{fromJson(needs.prepare.outputs.runners)}}
    runs-on: ${{matrix.runner}}
    container: ${{matrix.container}}
    timeout-minutes: ${{fromJson(github.event.inputs.timeout)}}
    permissions:
      id-token: write
      contents: write
      packages: write
    defaults:
      run:
        shell: /bin/bash -e {0}
        working-directory: ${{matrix.workdir || github.workspace}}
    env:
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      HOMEBREW_GITHUB_API_TOKEN: ${{secrets.GITHUB_TOKEN}}
      BOTTLES_DIR: ${{ matrix.workdir || github.workspace }}/bottles
    steps:
      - name: ${{inputs.formula}}
        id: print_details
        run: |
          echo sender='${{github.event.sender.login}}'
          echo formula='${{inputs.formula}}'
          echo runner='${{inputs.runner}}'
          echo timeout='${{inputs.timeout}}'
          echo issue='${{inputs.issue}}'
          echo upload='${{inputs.upload}}'
      
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
        with:
          core: true
          cask: false
          test-bot: true

      # - run: brew test-bot --only-cleanup-before
      #   if: fromJson(inputs.cleanup)
      #   shell: /bin/bash -e {0}

      - name: Set up RubyGems cache
        shell: bash
        run: |
          cache_key_prefix="${{ runner.os }}"
          if [[ "${{ runner.os }}" = macOS ]]
          then
            macos_full_version="$(sw_vers -productVersion)"
            macos_version="${macos_full_version%%.*}"
            arch="$(uname -m)"
            cache_key_prefix="${macos_version}-${arch}"
          fi
          echo "cache_key_prefix=${cache_key_prefix}" >> "$GITHUB_ENV"

      - name: Cache Homebrew Bundler RubyGems
        id: cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.set-up-homebrew.outputs.gems-path }}
          key: ${{ env.cache_key_prefix }}-rubygems-${{ steps.set-up-homebrew.outputs.gems-hash }}
          restore-keys: ${{ env.cache_key_prefix }}-rubygems-

      # - name: Run brew test-bot --only-setup
      #   run: |
      #     printf '\n<details><summary>brew test-bot --only-setup</summary>\n<p>\n\n' >> "$GITHUB_STEP_SUMMARY"
      #     printf '```\n' >> "${GITHUB_STEP_SUMMARY}"
      #     HOMEBREW_NO_COLOR=1 brew test-bot --only-setup | tee -a "${GITHUB_STEP_SUMMARY}"
      #     printf '```\n' >> "${GITHUB_STEP_SUMMARY}"
      #     printf '\n</p>\n</details>\n' >> "$GITHUB_STEP_SUMMARY"
      #   shell: bash

      - name: Set up bottles directory
        run: |
          rm -rvf "${BOTTLES_DIR:?}"
          mkdir "${BOTTLES_DIR:?}"
        shell: bash
        env:
          BOTTLES_DIR: ${{ env.BOTTLES_DIR }}

      # - name: Download bottles from GitHub Actions
      #   if: fromJson(inputs.download-bottles)
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: bottles
      #     path: ${{ env.BOTTLES_DIR }}

      - working-directory: ${{ env.BOTTLES_DIR }}
        run: |
          brew test-bot \
            --only-formulae \
            --only-json-tab \
            --skip-online-checks \
            --skip-dependents \
            '${{inputs.formula}}'
          echo "tarball_name=$(pwd)/$(ls *.tar.gz | head -n 1)" >> "$GITHUB_ENV"

      # - name: commands
      #   id: run_extra_commands
      #   working-directory: ${{ env.BOTTLES_DIR }}
      #   run: |
      #     echo "tarball_name=$(ls *.tar.gz | head -n 1)" >> "$GITHUB_ENV"

      - name: generate build provenance
        uses: github-early-access/generate-build-provenance@main
        with:
          subject-path: '${{ env.tarball_name }}'